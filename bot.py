# bot.py
import telebot
import requests
import json
import re
import os
from bs4 import BeautifulSoup
from typing import Dict, List

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "my_token"  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
PROGRAM_URLS = {
    "ai": "https://abit.itmo.ru/program/master/ai",
    "ai_product": "https://abit.itmo.ru/program/master/ai_product"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
PROGRAM_DATA = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATE = {}  # user_id -> {stage: str, background: str, preferences: list}


def load_all_programs():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON-—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ data/ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ PROGRAM_DATA.
    –ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ .json) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∫–ª—é—á.
    """
    global PROGRAM_DATA
    data_dir = "data"

    if not os.path.exists(data_dir):
        raise FileNotFoundError(f"–ü–∞–ø–∫–∞ '{data_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    PROGRAM_DATA = {}
    loaded_files = 0

    for filename in os.listdir(data_dir):
        if filename.endswith(".json"):
            file_path = os.path.join(data_dir, filename)
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ .json) –∫–∞–∫ –∫–ª—é—á
                key = filename[:-5]  # —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π 5 —Å–∏–º–≤–æ–ª–æ–≤: .json
                PROGRAM_DATA[key] = data
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename} ‚Üí –∫–ª—é—á '{key}'")
                loaded_files += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {e}")

    if loaded_files == 0:
        print("‚ö†Ô∏è –í –ø–∞–ø–∫–µ 'data' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞.")
    else:
        print(f"üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_files} –ø—Ä–æ–≥—Ä–∞–º–º.")


# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    USER_STATE[user_id] = {"stage": "start"}

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ –ò–¢–ú–û.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏:\n\n"
        "üîπ *–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç*\n"
        "üîπ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä.\n"
        "–ò–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "¬´–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º—ã?¬ª",
        parse_mode="Markdown"
    )


@bot.message_handler(commands=['help'])
def help_command(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    btn2 = telebot.types.KeyboardButton("–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
    markup.add(btn1, btn2)

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=markup
    )


@bot.message_handler(commands=['compare'])
def compare(message):
    ai = PROGRAM_DATA.get("itmo_ai_parsed", {})
    ai_p = PROGRAM_DATA.get("itmo_ai_product_parsed", {})

    msg = (
        "üìä *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º*\n\n"
        f"üéØ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {ai.get('title', '‚Äî')}\n"
        f"üìò *–§–æ–∫—É—Å:* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ò–ò (ML, Data Engineering)\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {ai.get('education_cost', {}).get('russian', '‚Äî')} ‚ÇΩ/–≥–æ–¥\n"
        f"üë• *–ö–∞—Ä—å–µ—Ä–∞:* ML Engineer, Data Analyst, AI Developer\n\n"

        f"üéØ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {ai_p.get('title', '‚Äî')}\n"
        f"üìò *–§–æ–∫—É—Å:* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {ai_p.get('education_cost', {}).get('russian', '‚Äî')} ‚ÇΩ/–≥–æ–¥\n"
        f"üë• *–ö–∞—Ä—å–µ—Ä–∞:* AI Product Manager, Product Lead, AI Analyst\n\n"

        "–ò—Å–ø–æ–ª—å–∑—É–π /recommend, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é."
    )
    bot.send_message(message.chat.id, msg, parse_mode="Markdown")


@bot.message_handler(commands=['recommend'])
def recommend(message):
    user_id = message.from_user.id
    USER_STATE[user_id] = {}
    USER_STATE[user_id]["stage"] = "question_0"
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —É –≤–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±—ç–∫–≥—Ä–∞—É–Ω–¥? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç)")
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç.")


# === –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–†–û–°–ê ===
@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id, {}).get("stage", "").startswith("question_"))
def handle_questionnaire(message):
    user_id = message.from_user.id
    stage = USER_STATE[user_id]["stage"]
    text = message.text.lower()

    if stage == "question_0":
        USER_STATE[user_id]["background"] = text
        bot.send_message(message.chat.id, "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏?")
        USER_STATE[user_id]["stage"] = "question_1"
    elif stage == "question_1":
        USER_STATE[user_id]["interest"] = text
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–ø—É—Å–∫–∞—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?")
        USER_STATE[user_id]["stage"] = "question_2"
    elif stage == "question_2":
        USER_STATE[user_id]["startup"] = text
        give_recommendation(message)
        USER_STATE[user_id]["stage"] = "advised"


def give_recommendation(message):
    user_id = message.from_user.id
    bg = USER_STATE[user_id].get("background", "")
    interest = USER_STATE[user_id].get("interest", "")
    startup = USER_STATE[user_id].get("startup", "")
    print(USER_STATE)

    ai_score = 0
    ai_p_score = 0

    tech_words = ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "ml", "data", "–∏–Ω–∂–µ–Ω–µ—Ä", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "python"]
    product_words = ["–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "–±–∏–∑–Ω–µ—Å", "—Å—Ç–∞—Ä—Ç–∞–ø", "product", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]

    for w in tech_words:
        if w in bg or w in interest:
            ai_score += 1
    for w in product_words:
        if w in bg or w in interest or w in startup:
            ai_p_score += 1

    if ai_score > ai_p_score:
        rec = PROGRAM_DATA["itmo_ai_parsed"]
        reason = "–í–∞—à –±—ç–∫–≥—Ä–∞—É–Ω–¥ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –±–ª–∏–∂–µ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
    elif ai_p_score > ai_score:
        rec = PROGRAM_DATA["itmo_ai_product_parsed"]
        reason = "–í—ã —Å–∫–ª–æ–Ω–Ω—ã –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –∫–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
    else:
        bot.send_message(message.chat.id, "–û–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /compare.")
        return

    msg = (
        f"*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:* {rec['title']}\n\n"
        # f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {rec['about']['lead']}\n"
        # f"*–ö–∞—Ä—å–µ—Ä–∞:* {rec['career']['text']}\n"
        # f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://abit.itmo.ru/program/master/{rec['slug']}\n\n"
        f"üí° *–ü—Ä–∏—á–∏–Ω–∞:* {reason}",
        )
    
    bot.send_message(message.chat.id, msg, parse_mode="Markdown")

    suggest_courses(message, rec)

@bot.message_handler(commands=['recommend'])
def suggest_courses(message, program):
    course_map = {
        "ai": [
            "–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "ML –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
            "Computer Vision",
            "Data Engineering"
        ],
        "ai_product": [
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏",
            "UX –¥–ª—è –ò–ò",
            "–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "AI Project Management"
        ]
    }
    slug = program.get("slug", "")
    courses = course_map.get(slug, [])
    bot.send_message(
        message.chat.id,
        "*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã:*\n" + "\n".join(f"- {c}" for c in courses),
        parse_mode="Markdown"
    )


# === –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–©–ò–• –í–û–ü–†–û–°–û–í ===
@bot.message_handler(func=lambda message: True)
def handle_query(message):
    text = message.text.lower()

    # –¢–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º—ã
    allowed = ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "ai", "product", "–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", "–∏—Ç–º–æ", 
               "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∏", "–ø–æ—Å—Ç—É–ø–∏—Ç—å", "–∫—É—Ä—Å—ã", "–∫–∞—Ä—å–µ—Ä–∞", 
               "–∫–æ–º–∞–Ω–¥–∞", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "—Å—Ä–∞–≤–Ω–∏—Ç—å", "—Ä—É–∫–æ–≤–æ–¥", "—Å—Ä–∞–≤", "–≤—ã–±—Ä–∞—Ç—å",
               "–º–µ–Ω–µ–¥–∂–µ—Ä", "—ç–∫–∑–∞–º–µ–Ω", "–¥–∞—Ç–∞", "–¥–∞—Ç—ã"]
    if not any(word in text for word in allowed):
        bot.reply_to(message, "–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û –ø–æ AI –∏ AI Product.")
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if "ai_product" in text or "ai product" in text or "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∏" in text:
        prog = PROGRAM_DATA.get("itmo_ai_product_parsed")
    elif "ai" in text or "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" in text:
        prog = PROGRAM_DATA.get("itmo_ai_parsed")
    else:
        bot.reply_to(message, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å(\n\n–ù–∞–ø–∏—à–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if "—Å—Ä–∞–≤–Ω" in text or "—Å—Ä–∞–≤–Ω–∏—Ç—å" in text or "–≤—ã–±—Ä–∞—Ç—å" in text:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /compare")
        return
    elif "—Ä–µ–∫–æ–º–µ–Ω–¥" in text:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /recommend")
        return
    elif "–∫–æ–º–∞–Ω–¥–∞" in text:
        if prog:
            team_list = "\n".join(f"‚Ä¢ {m['name']} ‚Äî {m['position']}" for m in prog['team'][:5])
            bot.send_message(message.chat.id, f"*–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:* {prog['title']}\n\n{team_list}", parse_mode="Markdown")
        return
    elif "—Ä—É–∫–æ–≤–æ–¥" in text or "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in text or "–º–µ–Ω–µ–¥–∂–µ—Ä" in text:
        if prog:
            sup = prog['supervisor']
            bot.send_message(message.chat.id, f"*–ú–µ–Ω–µ–¥–∂–µ—Ä:* {sup['name']}\n", parse_mode="Markdown")
        return
    elif "–ø–æ—Å—Ç—É–ø–∏—Ç—å" in text or "—ç–∫–∑–∞–º–µ–Ω" in text or "–¥–∞—Ç–∞" in text or "–¥–∞—Ç—ã" in text:
        if prog:
            dates = ", ".join(d.split("T")[0] for d in prog['exam_dates'][:3])
            bot.send_message(message.chat.id, f"*–î–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤:* {dates}", parse_mode="Markdown")
        return

    # –û—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
    if prog:
        bot.send_message(
            message.chat.id,
            f"*{prog['title']}*\n\n"
            f"{prog['about']['lead']}\n\n"
            f"*–ö–∞—Ä—å–µ—Ä–∞:* {prog['career']['text']}\n"
            f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {prog['education_cost'].get('russian', '‚Äî')} ‚ÇΩ/–≥–æ–¥\n"
            f"*–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω:* [–°–∫–∞—á–∞—Ç—å PDF]({prog['academic_plan_url']})",
            parse_mode="Markdown",
            disable_web_page_preview=False
        )
    else:
        bot.send_message(message.chat.id, "–û –∫–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ? –£—Ç–æ—á–Ω–∏—Ç–µ: AI –∏–ª–∏ AI Product?")


# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    load_all_programs()

    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.polling(none_stop=True)
